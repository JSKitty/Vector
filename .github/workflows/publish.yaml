name: 'publish'

on:
  push:
    branches:
      - release

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev
          # Install Vulkan SDK with glslc compiler
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt-get update
          sudo apt-get install -y vulkan-sdk

      - name: Install Vulkan SDK (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          Write-Host "Downloading Vulkan runtime and tools..."
          # Create directories
          New-Item -ItemType Directory -Force -Path "C:\VulkanSDK"
          
          # Download pre-built glslc directly from Google's shaderc
          Invoke-WebRequest -Uri "https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2022/433/20221215-134414/install.zip" -OutFile "shaderc.zip"
          Expand-Archive -Path "shaderc.zip" -DestinationPath "C:\VulkanSDK\shaderc"
          
          # Download Vulkan runtime
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-runtime-components.zip" -OutFile "vulkan-runtime.zip"
          Expand-Archive -Path "vulkan-runtime.zip" -DestinationPath "C:\VulkanSDK\runtime"
          
          # Set environment variables
          echo "VULKAN_SDK=C:\VulkanSDK" >> $env:GITHUB_ENV
          echo "C:\VulkanSDK\shaderc\install\bin" >> $env:GITHUB_PATH
          echo "C:\VulkanSDK\runtime\Bin" >> $env:GITHUB_PATH
          
          # Verify glslc is available
          Write-Host "Checking for glslc..."
          & "C:\VulkanSDK\shaderc\install\bin\glslc.exe" --version

      - name: install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Vector v__VERSION__'
          releaseBody: 'A new Vector release arrives! If you can see this, the changelog has not been written yet, wait around to see whats new!'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
